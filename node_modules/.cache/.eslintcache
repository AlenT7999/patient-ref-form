[{"/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/index.js":"1","/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/App.js":"2","/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/reportWebVitals.js":"3","/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/components/PatientRef.js":"4","/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/components/Form.js":"5","/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/utils/axios.js":"6"},{"size":535,"mtime":1660293484419,"results":"7","hashOfConfig":"8"},{"size":383,"mtime":1660294930168,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1660293484419,"results":"10","hashOfConfig":"8"},{"size":1692,"mtime":1660508255026,"results":"11","hashOfConfig":"8"},{"size":18838,"mtime":1660652228144,"results":"12","hashOfConfig":"8"},{"size":383,"mtime":1660601358351,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1rdlriu",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/index.js",[],[],[],"/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/App.js",[],[],"/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/reportWebVitals.js",[],[],"/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/components/PatientRef.js",[],[],"/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/components/Form.js",["34","35","36"],["37"],"import {\n  Alert,\n  Button,\n  Grid,\n  InputAdornment,\n  Snackbar,\n  TextField,\n} from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport {\n  AccountCircle,\n  Add,\n  CakeOutlined,\n  DeleteOutline,\n  Email,\n  Phone,\n  TranslateOutlined,\n} from \"@mui/icons-material\";\nimport * as yup from \"yup\";\nimport API from \"../utils/axios\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport {\n  geocodeByAddress,\n  geocodeByPlaceId,\n  getLatLng,\n} from \"react-places-autocomplete\";\n\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  dob: \"\",\n  language: \"\",\n  phone: \"\",\n  email: \"\",\n  address: \"\",\n  notes: \"\",\n};\n\nconst style = {\n  textFiedStyle: {\n    marginTop: \"15px\",\n  },\n};\nexport default function Form() {\n  const colors = [\"#25A575\", \"#2595A5\", \"#3A719B\", '#254B7A', \"#142B58\"];\n  const validationSchema = yup.object({\n    firstName: yup.string().required(\"first name is required\").min(3),\n    lastName: yup.string().required(\"last name is required\"),\n    dob: yup.string().required(\"date of birth is required\"),\n    language: yup.string().required(\"contact language is required\"),\n    phone: yup\n      .number()\n      .moreThan(999999999, \"10 digits required\")\n      .typeError(\"numbers are allowed\")\n      .required(\"Mobile is required\"),\n    email: yup\n      .string()\n      .email(\"Enter a valid email\")\n      .required(\"email is required\"),\n    address: yup.string().max(100).required(\"address is required\"),\n    notes: yup.string().max(100),\n  });\n  const [referrals, setReferrals] = useState([]);\n  const [type, setType] = useState(\"text\");\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [alertColor, setAlertColor] = useState(\"success\");\n  const [address, setAddress] = useState(\"\");\n\n  const sendReferrals = () => {\n    if (referrals && referrals.length !== 0) {\n      API.post(`/patient`, referrals)\n        .then((response) => {\n          const { status, message } = response.data;\n          if (status) {\n            setAlertColor(\"success\");\n            setMessage(\n              `Success! You have submitted ${referrals.length} pending requests. You will be notified once they've been approved`\n            );\n            setOpen(true);\n          } else {\n            setMessage(message);\n            setAlertColor(\"error\");\n            setOpen(true);\n          }\n        })\n        .catch((error) => {\n          setMessage(error.message);\n          setAlertColor(\"error\");\n          setOpen(true);\n        });\n    }\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleChanger = (address) => {\n    setAddress(address);\n  };\n\n  const handleSelect = (address) => {\n    setAddress(address);\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => console.log(\"Success\", latLng))\n      .catch((error) => console.error(\"Error\", error));\n  };\n\n  const deleteItem = (i) => {\n    console.log('idex', i);\n    let items = [...referrals];\n    items.splice(i,1);\n    setReferrals(items);\n    console.log('reff', referrals);\n  }\n\n  return (\n    <>\n      {referrals &&\n        referrals.map((row, i) => {\n          return (\n            <Grid style={{ marginBottom: \"10px\" }} key={i}>\n              <Grid style={{ backgroundColor: \"white\" }}>\n                <Grid container>\n                  <Grid item xs={12}>\n                    <Grid container style={{ height: \"5vh\" }}>\n                      <Grid\n                        item\n                        xs={1}\n                        style={{\n                          backgroundColor: colors[i],\n                          paddingTop: \"10px\",\n                        }}\n                      >\n                        {i + 1}\n                      </Grid>\n                      <Grid\n                        item\n                        xs={10}\n                        align=\"left\"\n                        style={{ paddingTop: \"10px\", paddingLeft: \"5px\" }}\n                      >\n                        {row.firstName + \" \" + row.lastName}\n                      </Grid>\n                      <Grid \n                        item\n                        xs={1}\n                        align=\"right\"\n                        style={{ paddingTop: \"10px\", paddingLeft: \"5px\" }}>\n                          <DeleteOutline onClick={()=>{deleteItem(i)}}/>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          );\n        })}\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n          console.log(\"values\", values, \"address\", address);\n          setReferrals((oldData) => [...oldData, values]);\n          actions.resetForm({\n            firstName: \"\",\n            lastName: \"\",\n            dob: \"\",\n            language: \"\",\n            phone: \"\",\n            email: \"\",\n            address: \"\",\n            notes: \"\",\n          });\n          setAddress('');\n          // console.log('works');\n        }}\n      >\n        {({\n          errors,\n          handleChange,\n          handleSubmit,\n          values,\n          touched,\n          setFieldValue,\n        }) => {\n          return (\n            <form\n              noValidate\n              onSubmit={handleSubmit}\n              style={{ marginTop: \"20px\" }}\n            >\n              <Grid style={{ backgroundColor: \"white\", paddingBottom: \"20px\" }}>\n                <Grid container>\n                  <Grid item xs={12}>\n                    <Grid container style={{ height: \"5vh\" }}>\n                      <Grid\n                        item\n                        xs={1}\n                        style={{\n                          backgroundColor: colors[referrals.length + 1],\n                          paddingTop: \"10px\",\n                        }}\n                      >\n                        {referrals.length + 1}\n                      </Grid>\n                      <Grid\n                        item\n                        xs={11}\n                        align=\"left\"\n                        style={{ paddingTop: \"10px\", paddingLeft: \"5px\" }}\n                      >\n                        New Referral\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid container item style={{ marginLeft: \"20px\" }}>\n                  <Grid item xs={5}>\n                    <TextField\n                      style={style.textFiedStyle}\n                      fullWidth\n                      required\n                      placeholder=\"First Name *\"\n                      id=\"outlined-required\"\n                      variant=\"standard\"\n                      name=\"firstName\"\n                      helperText={touched.firstName && errors.firstName}\n                      error={touched.firstName && !!errors.firstName}\n                      onChange={handleChange}\n                      value={values.firstName}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <AccountCircle />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={1} />\n                  <Grid item xs={5}>\n                    <TextField\n                      style={style.textFiedStyle}\n                      fullWidth\n                      required\n                      placeholder=\"Last Name *\"\n                      id=\"outlined-required\"\n                      variant=\"standard\"\n                      name=\"lastName\"\n                      helperText={touched.lastName && errors.lastName}\n                      error={touched.lastName && !!errors.lastName}\n                      onChange={handleChange}\n                      value={values.lastName}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <AccountCircle />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                  </Grid>\n\n                  {/* second row */}\n\n                  <Grid item xs={5}>\n                    <TextField\n                      style={style.textFiedStyle}\n                      fullWidth\n                      required\n                      placeholder=\"Date of Birth *\"\n                      type={type}\n                      id=\"outlined-required\"\n                      variant=\"standard\"\n                      name=\"dob\"\n                      helperText={touched.dob && errors.dob}\n                      error={touched.dob && !!errors.dob}\n                      onChange={handleChange}\n                      value={values.dob}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <CakeOutlined />\n                          </InputAdornment>\n                        ),\n                      }}\n                      onFocus={() => setType(\"date\")}\n                      onBlur={() => setType(\"text\")}\n                    />\n                  </Grid>\n                  <Grid item xs={1} />\n                  <Grid item xs={5}>\n                    <TextField\n                      style={style.textFiedStyle}\n                      fullWidth\n                      required\n                      placeholder=\"Contact Language *\"\n                      id=\"outlined-required\"\n                      variant=\"standard\"\n                      name=\"language\"\n                      helperText={touched.language && errors.language}\n                      error={touched.language && !!errors.language}\n                      onChange={handleChange}\n                      value={values.language}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <TranslateOutlined />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                  </Grid>\n\n                  {/* third row */}\n\n                  <Grid item xs={5}>\n                    <TextField\n                      style={style.textFiedStyle}\n                      fullWidth\n                      required\n                      placeholder=\"Phone *\"\n                      id=\"outlined-required\"\n                      variant=\"standard\"\n                      name=\"phone\"\n                      helperText={touched.phone && errors.phone}\n                      error={touched.phone && !!errors.phone}\n                      onChange={handleChange}\n                      value={values.phone}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <Phone />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={1} />\n                  <Grid item xs={5}>\n                    <TextField\n                      style={style.textFiedStyle}\n                      fullWidth\n                      required\n                      placeholder=\"Email *\"\n                      id=\"outlined-required\"\n                      variant=\"standard\"\n                      name=\"email\"\n                      helperText={touched.email && errors.email}\n                      error={touched.email && !!errors.email}\n                      onChange={handleChange}\n                      value={values.email}\n                      InputProps={{\n                        startAdornment: (\n                          <InputAdornment position=\"start\">\n                            <Email />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={11}>\n                    {/* <TextField\n                    style={style.textFiedStyle}\n                    fullWidth\n                    required\n                    id=\"outlined-required\"\n                    placeholder=\"Address *\"\n                    variant=\"standard\"\n                    name=\"address\"\n                    helperText={touched.address && errors.address}\n                    error={touched.address && !!errors.address}\n                    onChange={handleChange}\n                    value={values.address}\n                  /> */}\n                    <PlacesAutocomplete\n                      value={address}\n                      onChange={(e) => {\n                        setFieldValue(\"address\", e);\n                        handleChanger(e);\n                      }}\n                      onSelect={(e) => {\n                        setFieldValue(\"address\", e);\n                        handleSelect(e);\n                      }}\n                    >\n                      {({\n                        getInputProps,\n                        suggestions,\n                        getSuggestionItemProps,\n                        loading,\n                      }) => (\n                        <div>\n                          <TextField\n                            fstyle={style.textFiedStyle}\n                            fullWidth\n                            required\n                            id=\"outlined-required\"\n                            placeholder=\"Address *\"\n                            variant=\"standard\"\n                            name=\"address\"\n                            helperText={\n                              address == \"\" && touched.address\n                                ? \"address is required\"\n                                : null\n                            }\n                            error={\n                              address == \"\" &&\n                              touched.address &&\n                              !!errors.address\n                            }\n                            onChange={() => {\n                              console.log(\"works\");\n                            }}\n                            value={address}\n                            style={style.textFiedStyle}\n                            {...getInputProps({\n                              className: \"location-search-input\",\n                            })}\n                          />\n                          <div className=\"autocomplete-dropdown-container\">\n                            {loading && <div>Loading...</div>}\n                            {suggestions.map((suggestion, i) => {\n                              const className = suggestion.active\n                                ? \"suggestion-item--active\"\n                                : \"suggestion-item\";\n                              // inline style for demonstration purpose\n                              const style = suggestion.active\n                                ? {\n                                    backgroundColor: \"#fafafa\",\n                                    cursor: \"pointer\",\n                                  }\n                                : {\n                                    backgroundColor: \"#ffffff\",\n                                    cursor: \"pointer\",\n                                  };\n                              return (\n                                <div\n                                  {...getSuggestionItemProps(suggestion, {\n                                    className,\n                                    style,\n                                  })}\n                                  key={i}\n                                >\n                                  <div\n                                    style={{\n                                      backgroundColor: \"white\",\n                                      padding: \"10px\",\n                                      boxShadow: \"2px 2px 2px 2px grey\",\n                                    }}\n                                  >\n                                    <span style={{ backgroundColor: \"white\" }}>\n                                      {suggestion.description}\n                                    </span>\n                                  </div>\n                                </div>\n                              );\n                            })}\n                          </div>\n                        </div>\n                      )}\n                    </PlacesAutocomplete>\n                  </Grid>\n                  <Grid item xs={11}>\n                    <TextField\n                      style={style.textFiedStyle}\n                      fullWidth\n                      required\n                      id=\"outlined-required\"\n                      placeholder=\"Notes/Reason\"\n                      variant=\"standard\"\n                      name=\"notes\"\n                      onChange={handleChange}\n                      value={values.notes}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n              {referrals.length < 5 ? (\n                <Grid\n                  style={{\n                    width: \"fit-content\",\n                  }}\n                >\n                  <Button\n                    style={{\n                      color: \"black\",\n                    }}\n                    variant=\"text\"\n                    type=\"submit\"\n                    startIcon={<Add />}\n                  >\n                    ADD ANOTHER PATIENT\n                  </Button>\n                </Grid>\n              ) : null}\n              <Grid align=\"center\" style={{ marginTop: \"20px\" }}>\n                <Button\n                  style={{\n                    borderRadius: \"10px\",\n                    backgroundColor: \"#0B2B5B\",\n                    width: \"100%\",\n                    color: \"white\",\n                  }}\n                  onClick={sendReferrals}\n                >\n                  SEND REFERRALS\n                </Button>\n              </Grid>\n            </form>\n          );\n        }}\n      </Formik>\n      <Snackbar\n        style={{ backgroundColor: \"#25A575\" }}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={open}\n        onClose={handleClose}\n        message={message}\n        autoHideDuration={6000}\n        // eslint-disable-next-line\n        key={\"top\" + \"center\"}\n      >\n        <Alert\n          onClose={handleClose}\n          severity={alertColor}\n          sx={{ width: \"100%\" }}\n        >\n          {message}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n}\n","/home/lenovo/Documents/interview/git gogo/git gogo2/patient-ref-form/src/utils/axios.js",[],[],{"ruleId":"38","severity":1,"message":"39","line":25,"column":3,"nodeType":"40","messageId":"41","endLine":25,"endColumn":19},{"ruleId":"42","severity":1,"message":"43","line":406,"column":39,"nodeType":"44","messageId":"45","endLine":406,"endColumn":41},{"ruleId":"42","severity":1,"message":"43","line":411,"column":39,"nodeType":"44","messageId":"45","endLine":411,"endColumn":41},{"ruleId":"46","severity":1,"message":"47","line":525,"column":20,"nodeType":"44","messageId":"48","endLine":525,"endColumn":21,"suppressions":"49"},"no-unused-vars","'geocodeByPlaceId' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["50"],{"kind":"51","justification":"52"},"directive",""]